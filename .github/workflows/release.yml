name: Release

on:
  push:
    branches: [master]

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry

      - name: Install project dependencies
        run: poetry install --with dev

      - name: Run Ruff
        run: poetry run ruff check .

      - name: Run Mypy
        run: poetry run mypy src/

      - name: Run Tests
        run: poetry run pytest

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}

      - name: Determine new version and update pyproject.toml
        id: versioning
        run: |
          pip install toml
          VERSION=$(python scripts/bump_version.py)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Commit version bump and changelog if version updated
        if: steps.versioning.outputs.version != ''
        run: |
          git add pyproject.toml CHANGELOG.md
          git commit -m "chore(ci): release ${{ steps.versioning.outputs.version }}"
          git push origin master

      - name: Build and publish to PyPI
        if: steps.versioning.outputs.version != ''
        run: |
          poetry build
          poetry publish --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release
        if: steps.versioning.outputs.version != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.versioning.outputs.version }}
          name: v${{ steps.versioning.outputs.version }}
          body_path: CHANGELOG.md

        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Generate API documentation
        run: poetry run python scripts/generate_api_docs.py

      - name: Install package for documentation
        run: poetry run pip install -e .

      - name: Deploy Documentation
        run: |
          git fetch origin
          poetry run mkdocs gh-deploy --force
