{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"The Trading Infrastructure Toolkit for Python  <p>   Research, simulate, and deploy algorithmic strategies \u2014 all in one place. </p>"},{"location":"#quickstart","title":"Quickstart","text":"PipPoetryColab <pre><code>pip install onesecondtrader\n</code></pre> <pre><code>poetry add onesecondtrader\n</code></pre> <pre><code>!pip install onesecondtrader\n</code></pre>"},{"location":"quickstart/","title":"\u2192 Quickstart","text":""},{"location":"quickstart/#redirecting","title":"Redirecting...","text":"<p>If you are not redirected automatically, click here.</p>"},{"location":"api-reference/overview/","title":"API Reference","text":""},{"location":"development/ci-cd/","title":"CI/CD Pipeline","text":"<p>The CI/CD pipeline uses local pre-commit hooks to ensure code quality and GitHub Actions to automate releases. The workflow consists of two main stages:</p> <ul> <li>local development with quality gates to prevent problematic commits, and </li> <li>automated deployment to handle versioning, package publishing and documentation deployment.</li> </ul> <p>The following diagram illustrates this CI/CD pipeline:</p> <pre><code>graph TD\n    A[Developer Commits] --&gt; B[\"Pre-commit Hooks&lt;br/&gt;\u2022 Code Quality (Ruff, MyPy)&lt;br/&gt;\u2022 Tests &amp; Coverage&lt;br/&gt;\u2022 Security (Bandit, Safety)&lt;br/&gt;\u2022 Generate API Docs\"]\n    B --&gt; B2[\"Commit Message Hook&lt;br/&gt;\u2022 Conventional Commits\"]\n    B2 --&gt; C{All Checks Pass?}\n    C --&gt;|No| D[Commit Blocked]\n    C --&gt;|Yes| E[Commit to Local Git]\n    E --&gt; F[Push to GitHub]\n    F --&gt; G[GitHub Actions Triggered]\n\n    G --&gt; H[Code Quality Checks]\n    H --&gt; I[Run Test Suite]\n    I --&gt; K[Semantic Release Analysis]\n\n    K --&gt; L{Version Bump Required?}\n    L --&gt;|Yes| M[Create Git Tag]\n    L --&gt;|No| P[Deploy Documentation]\n\n    M --&gt; O[Publish to PyPI]\n    O --&gt; P[Deploy Documentation]\n    P --&gt; Q[Pipeline Complete]\n\n    D --&gt; R[Fix Issues &amp; Retry]\n    R --&gt; A\n\n    subgraph \"Local Development\"\n        A\n        B\n        B2\n        C\n        D\n        E\n        R\n    end\n\n    subgraph \"GitHub Repository\"\n        F\n        G\n    end\n\n    subgraph \"CI/CD Pipeline\"\n        H\n        I\n        K\n        L\n        M\n    end\n\n    subgraph \"Deployment\"\n        O\n        P\n        Q\n    end</code></pre>"},{"location":"development/ci-cd/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Local quality gates that run before each commit with <code>fail_fast: true</code> - any failure blocks the commit.</p>"},{"location":"development/ci-cd/#code-quality-hooks","title":"Code Quality Hooks","text":"<ul> <li>Ruff Check: Linting with auto-fixes (<code>poetry run ruff check --fix</code>)</li> <li>Ruff Format: Code formatting (<code>poetry run ruff format</code>)</li> <li>MyPy: Type checking (<code>poetry run mypy --ignore-missing-imports</code>)</li> </ul>"},{"location":"development/ci-cd/#testing-hooks","title":"Testing Hooks","text":"<ul> <li>Pytest: Full test suite (<code>poetry run pytest</code>)</li> <li>Doctest: Validates docstring examples (<code>poetry run pytest --doctest-modules</code>)</li> <li>Coverage: Enforces 90% coverage threshold (<code>poetry run pytest --cov=src/ --cov-fail-under=90</code>)</li> </ul>"},{"location":"development/ci-cd/#security-hooks","title":"Security Hooks","text":"<ul> <li>Bandit: Scans for security vulnerabilities (<code>poetry run bandit -r src/</code>)</li> <li>Safety: Checks dependencies for known vulnerabilities</li> <li>Gitleaks: Detects secrets and API keys</li> </ul>"},{"location":"development/ci-cd/#documentation-hook","title":"Documentation Hook","text":"<ul> <li>Generate API Docs: Auto-generates and stages API documentation based on google-style docstrings in <code>src/onesecondtrader</code></li> </ul>"},{"location":"development/ci-cd/#external-hooks","title":"External Hooks","text":"<ul> <li>Conventional Commits: Enforces commit message format (required for semantic-release)</li> <li>File Validation: YAML/TOML/JSON syntax, file size limits, merge conflicts</li> </ul>"},{"location":"development/ci-cd/#commit-message-conventions","title":"Commit Message Conventions","text":"<p>This project follows Conventional Commits specification for commit messages. This standardized format enables automated semantic versioning and changelog generation.</p>"},{"location":"development/ci-cd/#commit-message-format","title":"Commit Message Format","text":"<pre><code>&lt;type&gt;: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre>"},{"location":"development/ci-cd/#commit-types","title":"Commit Types","text":"<ul> <li>feat: New features that add functionality</li> <li>fix: Bug fixes and patches</li> <li>docs: Documentation changes only</li> <li>chore: Maintenance tasks, dependency updates, build changes</li> <li>test: Adding or modifying tests</li> <li>refactor: Code changes that neither fix bugs nor add features</li> <li>perf: Performance improvements</li> <li>ci: Changes to CI/CD configuration</li> </ul>"},{"location":"development/ci-cd/#examples","title":"Examples","text":"<pre><code>feat: add portfolio optimization algorithm\nfix: resolve division by zero in risk calculation\ndocs: update API reference for trading module\nchore: bump pandas dependency to 2.3.1\ntest: add unit tests for backtesting engine\n</code></pre> <p>Commit messages are validated by the <code>conventional-pre-commit</code> hook, which blocks commits that don't follow this format.</p>"},{"location":"development/ci-cd/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>Automated CI/CD that triggers on every push to <code>master</code> branch.</p>"},{"location":"development/ci-cd/#workflow-steps","title":"Workflow Steps","text":"<ol> <li>Setup: Checkout code with full Git history, install Python 3.11 and Poetry</li> <li>Dependencies: Install project dependencies with <code>poetry install --with dev</code></li> <li>Quality Checks: Run Ruff linting, MyPy type checking, and pytest</li> <li>Git Config: Configure bot identity for automated operations</li> <li>Semantic Release: Analyze commits, bump version, create changelog, publish to PyPI</li> <li>Deploy Docs: Deploy documentation to GitHub Pages</li> </ol>"},{"location":"development/ci-cd/#key-features","title":"Key Features","text":"<ul> <li>Semantic Versioning: Uses conventional commits to determine version bumps</li> <li>PyPI Publishing: Automatically publishes new releases</li> <li>Documentation: Deploys to GitHub Pages on every release</li> <li>Environment: Requires <code>GITHUB_TOKEN</code> and <code>PYPI_API_TOKEN</code> secrets</li> </ul>"},{"location":"development/ci-cd/#setup-instructions","title":"Setup Instructions","text":""},{"location":"development/ci-cd/#github-configuration","title":"GitHub Configuration","text":"<p>Required Secrets (<code>Settings &gt; Secrets and variables &gt; Actions</code>): - <code>PYPI_API_TOKEN</code>: Generate from PyPI account settings</p> <p>Repository Settings: - Actions: Enable \"Read and write permissions\" and \"Allow GitHub Actions to create and approve pull requests\" - Pages: Set source to \"Deploy from a branch\" using <code>gh-pages</code> branch</p>"},{"location":"development/ci-cd/#local-development-setup","title":"Local Development Setup","text":"<p>Install pre-commit hooks: <pre><code>poetry run pre-commit install\npoetry run pre-commit install --hook-type commit-msg\n</code></pre></p> <p>Test installation: <pre><code>poetry run pre-commit run --all-files\n</code></pre></p>"},{"location":"development/ci-cd/#required-configuration","title":"Required Configuration","text":"<p>pyproject.toml: <pre><code>[tool.semantic_release]\nversion_source = \"tag\"\nupload_to_pypi = true\n</code></pre></p> <p>mkdocs.yml (key plugins): <pre><code>plugins:\n  - mkdocstrings:\n      handlers:\n        python:\n          options:\n            docstring_style: google\n</code></pre></p>"}]}