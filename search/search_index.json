{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"The Trading Infrastructure Toolkit for Python  <p>   Research, simulate, and deploy algorithmic strategies \u2014 all in one place. </p>"},{"location":"#quickstart","title":"Quickstart","text":"PipPoetryColab <pre><code>pip install onesecondtrader\n</code></pre> <pre><code>poetry add onesecondtrader\n</code></pre> <pre><code>!pip install onesecondtrader\n</code></pre>"},{"location":"quickstart/","title":"\u2192 Quickstart","text":""},{"location":"quickstart/#redirecting","title":"Redirecting...","text":"<p>If you are not redirected automatically, click here.</p>"},{"location":"api-reference/domain_models/","title":"Domain Models","text":"<p>Domain models for trading infrastructure.</p> <p>This module defines the core domain models used across the trading infrastructure.  The design follows Domain-Driven Design (DDD) principles to structure domain logic  into semantically cohesive and type-safe groupings. The models reflect foundational  concepts such as orders, execution states, and position lifecycles. This establishes a  ubiquitous language that is shared across modules, interfaces, and system components.</p> <p>Using enums to define these domain models provides the following benefits:</p> <ol> <li>Type Safety \u2013 Prevents invalid states (e.g., avoids <code>\"buy\"</code> vs <code>\"BUY\"</code> bugs)</li> <li>Compile-Time Validation \u2013 Enables early detection of missing cases (e.g., in match statements)</li> <li>Semantic Precision \u2013 Improves self-documentation and system comprehensibility</li> <li>Refactor Robustness \u2013 Reduces breakage when business rules evolve</li> <li>Performance \u2013 More efficient than string comparisons at runtime</li> <li>Domain Vocabulary \u2013 Aligns code with trading terminology (e.g., <code>OrderType.LIMIT</code>)</li> </ol> <p>All enums use <code>enum.auto()</code> to delegate value assignment unless interoperability with  external systems requires explicit values. This minimizes maintenance overhead and  ensures uniqueness without manual management.</p> <p>The domain models are grouped into the following classes:</p> <ul> <li>MarketData \u2013 Market data feeds, aggregated bars, record metadata</li> <li>PositionManagement \u2013 Orders, execution states, trade lifecycle controls</li> </ul>"},{"location":"api-reference/domain_models/#onesecondtrader.domain_models.MarketData","title":"<code>MarketData</code>","text":"<p>Domain model for market data representation.</p> <p>This namespace defines core data structures and enums related to market data, such as aggregated price bars and data record types.</p> Source code in <code>src/onesecondtrader/domain_models.py</code> <pre><code>class MarketData:\n    \"\"\"\n    Domain model for market data representation.\n\n    This namespace defines core data structures and enums related to market data,\n    such as aggregated price bars and data record types.\n    \"\"\"\n\n    OHLCV = collections.namedtuple(\"OHLCV\", [\"open\", \"high\", \"low\", \"close\", \"volume\"])\n\n    class RecordType(enum.Enum):\n        \"\"\"\n        Market data record type identifiers using Databento rtype integers.\n\n        The `MarketData.RecordType` enum preserves compatibility with format by using\n         their specified `rtype` integer assignments. This allows tight integration with\n         Databento data streams while remaining agnostic to any specific vendor.\n\n        Values:\n            - OHLCV_1S (32): 1-second bars\n            - OHLCV_1M (33): 1-minute bars\n            - OHLCV_1H (34): 1-hour bars\n            - OHLCV_1D (35): Daily bars\n        \"\"\"\n\n        OHLCV_1S = 32\n        OHLCV_1M = 33\n        OHLCV_1H = 34\n        OHLCV_1D = 35\n\n        @classmethod\n        def to_string(cls, rtype: int) -&gt; str:\n            \"\"\"Convert record type integer to human-readable description.\"\"\"\n            match rtype:\n                case cls.OHLCV_1S.value:\n                    return \"1-second bars\"\n                case cls.OHLCV_1M.value:\n                    return \"1-minute bars\"\n                case cls.OHLCV_1H.value:\n                    return \"1-hour bars\"\n                case cls.OHLCV_1D.value:\n                    return \"daily bars\"\n                case _:\n                    return f\"unknown ({rtype})\"\n</code></pre>"},{"location":"api-reference/domain_models/#onesecondtrader.domain_models.MarketData.RecordType","title":"<code>RecordType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Market data record type identifiers using Databento rtype integers.</p> <p>The <code>MarketData.RecordType</code> enum preserves compatibility with format by using  their specified <code>rtype</code> integer assignments. This allows tight integration with  Databento data streams while remaining agnostic to any specific vendor.</p> Values <ul> <li>OHLCV_1S (32): 1-second bars</li> <li>OHLCV_1M (33): 1-minute bars</li> <li>OHLCV_1H (34): 1-hour bars</li> <li>OHLCV_1D (35): Daily bars</li> </ul> Source code in <code>src/onesecondtrader/domain_models.py</code> <pre><code>class RecordType(enum.Enum):\n    \"\"\"\n    Market data record type identifiers using Databento rtype integers.\n\n    The `MarketData.RecordType` enum preserves compatibility with format by using\n     their specified `rtype` integer assignments. This allows tight integration with\n     Databento data streams while remaining agnostic to any specific vendor.\n\n    Values:\n        - OHLCV_1S (32): 1-second bars\n        - OHLCV_1M (33): 1-minute bars\n        - OHLCV_1H (34): 1-hour bars\n        - OHLCV_1D (35): Daily bars\n    \"\"\"\n\n    OHLCV_1S = 32\n    OHLCV_1M = 33\n    OHLCV_1H = 34\n    OHLCV_1D = 35\n\n    @classmethod\n    def to_string(cls, rtype: int) -&gt; str:\n        \"\"\"Convert record type integer to human-readable description.\"\"\"\n        match rtype:\n            case cls.OHLCV_1S.value:\n                return \"1-second bars\"\n            case cls.OHLCV_1M.value:\n                return \"1-minute bars\"\n            case cls.OHLCV_1H.value:\n                return \"1-hour bars\"\n            case cls.OHLCV_1D.value:\n                return \"daily bars\"\n            case _:\n                return f\"unknown ({rtype})\"\n</code></pre>"},{"location":"api-reference/domain_models/#onesecondtrader.domain_models.MarketData.RecordType.to_string","title":"<code>to_string(rtype)</code>  <code>classmethod</code>","text":"<p>Convert record type integer to human-readable description.</p> Source code in <code>src/onesecondtrader/domain_models.py</code> <pre><code>@classmethod\ndef to_string(cls, rtype: int) -&gt; str:\n    \"\"\"Convert record type integer to human-readable description.\"\"\"\n    match rtype:\n        case cls.OHLCV_1S.value:\n            return \"1-second bars\"\n        case cls.OHLCV_1M.value:\n            return \"1-minute bars\"\n        case cls.OHLCV_1H.value:\n            return \"1-hour bars\"\n        case cls.OHLCV_1D.value:\n            return \"daily bars\"\n        case _:\n            return f\"unknown ({rtype})\"\n</code></pre>"},{"location":"api-reference/domain_models/#onesecondtrader.domain_models.PositionManagement","title":"<code>PositionManagement</code>","text":"<p>Trading domain concepts for managing orders and positions.</p> <p>This namespace defines core abstractions related to the lifecycle of orders.</p> Source code in <code>src/onesecondtrader/domain_models.py</code> <pre><code>class PositionManagement:\n    \"\"\"\n    Trading domain concepts for managing orders and positions.\n\n    This namespace defines core abstractions related to the lifecycle of orders.\n    \"\"\"\n\n    class OrderType(enum.Enum):\n        \"\"\"\n        Order execution types.\n\n        Values:\n            - MARKET: Execute immediately at best available price\n            - LIMIT: Execute only at specified price or better\n            - STOP: Becomes market order when trigger price is reached\n            - STOP_LIMIT: Becomes limit order when trigger price is reached\n        \"\"\"\n\n        MARKET = enum.auto()\n        LIMIT = enum.auto()\n        STOP = enum.auto()\n        STOP_LIMIT = enum.auto()\n\n    class OrderState(enum.Enum):\n        \"\"\"\n        Order lifecycle states from creation to completion.\n\n        Values:\n            - NEW: Created but not submitted\n            - SUBMITTED: Sent to broker/exchange\n            - ACTIVE: Live in market\n            - PARTIALLY_FILLED: Partially executed\n            - FILLED: Completely executed\n            - CANCELLED: Cancelled before first fill\n            - CANCELLED_AT_PARTIAL_FILL: Cancelled after partial fill\n            - REJECTED: Rejected by broker/exchange\n            - EXPIRED: Expired due to time-in-force constraints\n        \"\"\"\n\n        NEW = enum.auto()\n        SUBMITTED = enum.auto()\n        ACTIVE = enum.auto()\n        PARTIALLY_FILLED = enum.auto()\n        FILLED = enum.auto()\n        CANCELLED = enum.auto()\n        CANCELLED_AT_PARTIAL_FILL = enum.auto()\n        REJECTED = enum.auto()\n        EXPIRED = enum.auto()\n\n    class Side(enum.Enum):\n        \"\"\"\n        Order direction - buy or sell.\n\n        Values:\n            - BUY: Buy the financial instrument\n            - SELL: Sell the financial instrument\n        \"\"\"\n\n        BUY = enum.auto()\n        SELL = enum.auto()\n\n    class TimeInForce(enum.Enum):\n        \"\"\"\n        Order time-in-force specifications.\n\n        Values:\n            - DAY: Valid until end of trading day\n            - FOK: Fill entire order immediately or cancel (Fill-or-Kill)\n            - GTC: Active until explicitly cancelled (Good-Till-Cancelled)\n            - GTD: Active until specified date (Good-Till-Date)\n            - IOC: Execute available quantity immediately, cancel rest (Immediate-or-Cancel)\n        \"\"\"\n\n        DAY = enum.auto()\n        FOK = enum.auto()\n        GTC = enum.auto()\n        GTD = enum.auto()\n        IOC = enum.auto()\n</code></pre>"},{"location":"api-reference/domain_models/#onesecondtrader.domain_models.PositionManagement.OrderType","title":"<code>OrderType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Order execution types.</p> Values <ul> <li>MARKET: Execute immediately at best available price</li> <li>LIMIT: Execute only at specified price or better</li> <li>STOP: Becomes market order when trigger price is reached</li> <li>STOP_LIMIT: Becomes limit order when trigger price is reached</li> </ul> Source code in <code>src/onesecondtrader/domain_models.py</code> <pre><code>class OrderType(enum.Enum):\n    \"\"\"\n    Order execution types.\n\n    Values:\n        - MARKET: Execute immediately at best available price\n        - LIMIT: Execute only at specified price or better\n        - STOP: Becomes market order when trigger price is reached\n        - STOP_LIMIT: Becomes limit order when trigger price is reached\n    \"\"\"\n\n    MARKET = enum.auto()\n    LIMIT = enum.auto()\n    STOP = enum.auto()\n    STOP_LIMIT = enum.auto()\n</code></pre>"},{"location":"api-reference/domain_models/#onesecondtrader.domain_models.PositionManagement.OrderState","title":"<code>OrderState</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Order lifecycle states from creation to completion.</p> Values <ul> <li>NEW: Created but not submitted</li> <li>SUBMITTED: Sent to broker/exchange</li> <li>ACTIVE: Live in market</li> <li>PARTIALLY_FILLED: Partially executed</li> <li>FILLED: Completely executed</li> <li>CANCELLED: Cancelled before first fill</li> <li>CANCELLED_AT_PARTIAL_FILL: Cancelled after partial fill</li> <li>REJECTED: Rejected by broker/exchange</li> <li>EXPIRED: Expired due to time-in-force constraints</li> </ul> Source code in <code>src/onesecondtrader/domain_models.py</code> <pre><code>class OrderState(enum.Enum):\n    \"\"\"\n    Order lifecycle states from creation to completion.\n\n    Values:\n        - NEW: Created but not submitted\n        - SUBMITTED: Sent to broker/exchange\n        - ACTIVE: Live in market\n        - PARTIALLY_FILLED: Partially executed\n        - FILLED: Completely executed\n        - CANCELLED: Cancelled before first fill\n        - CANCELLED_AT_PARTIAL_FILL: Cancelled after partial fill\n        - REJECTED: Rejected by broker/exchange\n        - EXPIRED: Expired due to time-in-force constraints\n    \"\"\"\n\n    NEW = enum.auto()\n    SUBMITTED = enum.auto()\n    ACTIVE = enum.auto()\n    PARTIALLY_FILLED = enum.auto()\n    FILLED = enum.auto()\n    CANCELLED = enum.auto()\n    CANCELLED_AT_PARTIAL_FILL = enum.auto()\n    REJECTED = enum.auto()\n    EXPIRED = enum.auto()\n</code></pre>"},{"location":"api-reference/domain_models/#onesecondtrader.domain_models.PositionManagement.Side","title":"<code>Side</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Order direction - buy or sell.</p> Values <ul> <li>BUY: Buy the financial instrument</li> <li>SELL: Sell the financial instrument</li> </ul> Source code in <code>src/onesecondtrader/domain_models.py</code> <pre><code>class Side(enum.Enum):\n    \"\"\"\n    Order direction - buy or sell.\n\n    Values:\n        - BUY: Buy the financial instrument\n        - SELL: Sell the financial instrument\n    \"\"\"\n\n    BUY = enum.auto()\n    SELL = enum.auto()\n</code></pre>"},{"location":"api-reference/domain_models/#onesecondtrader.domain_models.PositionManagement.TimeInForce","title":"<code>TimeInForce</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Order time-in-force specifications.</p> Values <ul> <li>DAY: Valid until end of trading day</li> <li>FOK: Fill entire order immediately or cancel (Fill-or-Kill)</li> <li>GTC: Active until explicitly cancelled (Good-Till-Cancelled)</li> <li>GTD: Active until specified date (Good-Till-Date)</li> <li>IOC: Execute available quantity immediately, cancel rest (Immediate-or-Cancel)</li> </ul> Source code in <code>src/onesecondtrader/domain_models.py</code> <pre><code>class TimeInForce(enum.Enum):\n    \"\"\"\n    Order time-in-force specifications.\n\n    Values:\n        - DAY: Valid until end of trading day\n        - FOK: Fill entire order immediately or cancel (Fill-or-Kill)\n        - GTC: Active until explicitly cancelled (Good-Till-Cancelled)\n        - GTD: Active until specified date (Good-Till-Date)\n        - IOC: Execute available quantity immediately, cancel rest (Immediate-or-Cancel)\n    \"\"\"\n\n    DAY = enum.auto()\n    FOK = enum.auto()\n    GTC = enum.auto()\n    GTD = enum.auto()\n    IOC = enum.auto()\n</code></pre>"},{"location":"api-reference/log_config/","title":"Log Config","text":"<p>Logging configuration for the OneSecondTrader package.</p> <p>This module sets up the default logging configuration and provides a logger instance for use throughout the package.</p> Source code in <code>log_config.py</code> <pre><code>\"\"\"Logging configuration for the OneSecondTrader package.\n\nThis module sets up the default logging configuration and provides\na logger instance for use throughout the package.\n\"\"\"\n\nimport logging\n\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format=\"%(asctime)s - %(levelname)s - %(threadName)s - %(message)s\",\n)\n\nlogger = logging.getLogger(\"onesecondtrader\")\n</code></pre>"},{"location":"api-reference/overview/","title":"API Reference","text":"<ul> <li> <p>Domain Models </p> <p> View <code>domain_models.py</code> API</p> </li> <li> <p>Log Config </p> <p> View <code>log_config.py</code> API</p> </li> </ul>"},{"location":"development/ci-cd/","title":"CI/CD Pipeline","text":"<p>The CI/CD pipeline uses local pre-commit hooks to ensure code quality and GitHub Actions to automate releases. The workflow consists of two main stages:</p> <ul> <li>local development with quality gates to prevent problematic commits, and </li> <li>automated deployment to handle versioning, package publishing and documentation deployment.</li> </ul> <p>The following diagram illustrates this CI/CD pipeline:</p> <pre><code>graph TD\n    A[Developer Commits] --&gt; B[\"Pre-commit Hooks&lt;br/&gt;\u2022 Code Quality (Ruff, MyPy)&lt;br/&gt;\u2022 Tests &amp; Coverage&lt;br/&gt;\u2022 Security (Bandit, Safety, Gitleaks)&lt;br/&gt;\u2022 Generate API Docs\"]\n    B --&gt; B2[\"Commit Message Hook&lt;br/&gt;\u2022 Conventional Commits\"]\n    B2 --&gt; C{All Checks Pass?}\n    C --&gt;|No| D[Commit Blocked]\n    C --&gt;|Yes| E[Commit to Local Git]\n    E --&gt; F[Push to GitHub]\n    F --&gt; G[GitHub Actions Triggered&lt;br/&gt;on master branch]\n\n    G --&gt; H[Setup Environment&lt;br/&gt;Python 3.11 + Poetry]\n    H --&gt; I[Install Dependencies]\n    I --&gt; J[Code Quality Checks&lt;br/&gt;Ruff + MyPy + Tests]\n    J --&gt; K[Configure Git with PAT]\n    K --&gt; L[Custom Version Analysis&lt;br/&gt;bump_version.py script]\n\n    L --&gt; M{Version Bump Required?}\n    M --&gt;|Yes| N[Update pyproject.toml&lt;br/&gt;&amp; CHANGELOG.md]\n    M --&gt;|No| S[Deploy Documentation Only]\n\n    N --&gt; O[Commit &amp; Push Changes]\n    O --&gt; P[Build &amp; Publish to PyPI]\n    P --&gt; Q[Create GitHub Release&lt;br/&gt;with tag &amp; changelog]\n    Q --&gt; R[Generate API Documentation&lt;br/&gt;from available modules]\n    R --&gt; S2[Install Package for Docs]\n    S2 --&gt; T[Deploy Documentation&lt;br/&gt;to GitHub Pages]\n    T --&gt; U2[Pipeline Complete&lt;br/&gt;\u26a0\ufe0f Pull &amp; Rebase Required]\n\n    S --&gt; R\n\n    D --&gt; U[Fix Issues &amp; Retry]\n    U --&gt; A\n\n    subgraph \"Local Development\"\n        A\n        B\n        B2\n        C\n        D\n        E\n        U\n    end\n\n    subgraph \"GitHub Repository\"\n        F\n        G\n    end\n\n    subgraph \"CI/CD Pipeline\"\n        H\n        I\n        J\n        K\n        L\n        M\n        N\n        O\n    end\n\n    subgraph \"Deployment\"\n        P\n        Q\n        R\n        S2\n        T\n        U2\n        S\n    end</code></pre>"},{"location":"development/ci-cd/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Local quality gates that run before each commit with <code>fail_fast: true</code> - any failure blocks the commit.</p>"},{"location":"development/ci-cd/#code-quality-hooks","title":"Code Quality Hooks","text":"<ul> <li>Ruff Check: Linting with auto-fixes (<code>poetry run ruff check --fix</code>)</li> <li>Ruff Format: Code formatting (<code>poetry run ruff format</code>)</li> <li>MyPy: Type checking (<code>poetry run mypy src/</code>)</li> </ul>"},{"location":"development/ci-cd/#testing-hooks","title":"Testing Hooks","text":"<ul> <li>Pytest: Full test suite (<code>poetry run pytest</code>)</li> <li>Doctest: Validates docstring examples (<code>poetry run pytest --doctest-modules</code>)</li> <li>Coverage: Enforces 90% coverage threshold (<code>poetry run pytest --cov=src/ --cov-fail-under=90</code>)</li> </ul>"},{"location":"development/ci-cd/#security-hooks","title":"Security Hooks","text":"<ul> <li>Bandit: Scans for security vulnerabilities (<code>poetry run bandit -r src/</code>)</li> <li>Safety: Checks dependencies for known vulnerabilities</li> <li>Gitleaks: Detects secrets and API keys</li> </ul>"},{"location":"development/ci-cd/#documentation-hook","title":"Documentation Hook","text":"<ul> <li>Generate API Docs: Auto-generates and stages API documentation dynamically based on available modules in <code>src/onesecondtrader</code></li> </ul>"},{"location":"development/ci-cd/#external-hooks","title":"External Hooks","text":"<ul> <li>Conventional Commits: Enforces commit message format (required for automated versioning)</li> <li>Gitleaks: Detects secrets and API keys in commits</li> <li>File Validation: YAML/TOML/JSON syntax, file size limits, merge conflicts, debug statements</li> </ul>"},{"location":"development/ci-cd/#commit-message-conventions","title":"Commit Message Conventions","text":"<p>This project follows Conventional Commits specification for commit messages. This standardized format enables automated semantic versioning and changelog generation.</p>"},{"location":"development/ci-cd/#commit-message-format","title":"Commit Message Format","text":"<pre><code>&lt;type&gt;: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre>"},{"location":"development/ci-cd/#commit-types","title":"Commit Types","text":"<ul> <li>feat: New features that add functionality</li> <li>fix: Bug fixes and patches</li> <li>docs: Documentation changes only</li> <li>chore: Maintenance tasks, dependency updates, build changes</li> <li>test: Adding or modifying tests</li> <li>refactor: Code changes that neither fix bugs nor add features</li> <li>perf: Performance improvements</li> <li>ci: Changes to CI/CD configuration</li> </ul>"},{"location":"development/ci-cd/#examples","title":"Examples","text":"<pre><code>feat: add portfolio optimization algorithm\nfix: resolve division by zero in risk calculation\ndocs: update API reference for trading module\nchore: bump pandas dependency to 2.3.1\ntest: add unit tests for backtesting engine\n</code></pre> <p>Commit messages are validated by the <code>conventional-pre-commit</code> hook, which blocks commits that don't follow this format.</p>"},{"location":"development/ci-cd/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>Automated CI/CD that triggers on every push to <code>master</code> branch.</p>"},{"location":"development/ci-cd/#workflow-steps","title":"Workflow Steps","text":"<ol> <li>Setup: Checkout code with full Git history (<code>fetch-depth: 0</code>), install Python 3.11 and Poetry</li> <li>Dependencies: Install project dependencies with <code>poetry install --with dev</code></li> <li>Quality Checks: Run Ruff linting, MyPy type checking, and pytest</li> <li>Git Configuration: Configure bot identity and PAT authentication for automated operations</li> <li>Version Analysis: Custom script analyzes conventional commits to determine version bump</li> <li>Conditional Release: If version bump required:</li> <li>Update <code>pyproject.toml</code> and <code>CHANGELOG.md</code></li> <li>Commit and push changes</li> <li>Build and publish to PyPI</li> <li>Create GitHub release with tag and changelog</li> <li>Documentation:</li> <li>Generate API documentation dynamically from available modules</li> <li>Install package for documentation imports</li> <li>Deploy to GitHub Pages using <code>mkdocs gh-deploy</code></li> </ol>"},{"location":"development/ci-cd/#key-features","title":"Key Features","text":"<ul> <li>Custom Semantic Versioning: Uses <code>scripts/bump_version.py</code> to analyze conventional commits</li> <li>Conditional Publishing: Only publishes when version bump is required</li> <li>Automated Changelog: Generates changelog from commit messages</li> <li>GitHub Releases: Creates releases with tags and changelog content</li> <li>Dynamic API Documentation: Automatically generates docs based on available modules</li> <li>Documentation Deployment: Always deploys docs, regardless of version changes</li> <li>PAT Authentication: Uses Personal Access Token for enhanced permissions</li> </ul>"},{"location":"development/ci-cd/#post-pipeline-workflow","title":"Post-Pipeline Workflow","text":""},{"location":"development/ci-cd/#important-pull-and-rebase-after-pipeline-completion","title":"\u26a0\ufe0f Important: Pull and Rebase After Pipeline Completion","text":"<p>When the CI/CD pipeline completes successfully and creates version bumps or releases, it pushes commits back to the repository. This means your local branch will be behind the remote branch.</p> <p>Required Steps After Pipeline Completion:</p> <pre><code># Pull the latest changes with rebase to maintain clean history\ngit pull --rebase origin master\n</code></pre> <p>Why This Is Necessary: - The pipeline creates automated commits (version bumps, changelog updates) - These commits are pushed to the remote repository - Your local branch becomes divergent from the remote - Without rebasing, your next push will be rejected or create merge conflicts</p> <p>Alternative Commands: <pre><code># If you prefer to see what changed first\ngit fetch origin\ngit log HEAD..origin/master --oneline  # See what commits were added\ngit rebase origin/master               # Apply them to your local branch\n\n# Or configure automatic rebase for this repository\ngit config pull.rebase true\ngit pull origin master\n</code></pre></p> <p>When to Pull and Rebase:</p> <ul> <li>After pushing commits that trigger a version bump</li> <li>After any successful pipeline run that shows \"version bump\" in the logs</li> <li>Before starting new work on the repository</li> <li>(!) Not necessary if the pipeline only deployed documentation (no version change)</li> </ul>"},{"location":"development/ci-cd/#setup-instructions","title":"Setup Instructions","text":""},{"location":"development/ci-cd/#github-configuration","title":"GitHub Configuration","text":"<p>Required Secrets (<code>Settings &gt; Secrets and variables &gt; Actions</code>): - <code>GH_PAT</code>: Personal Access Token with enhanced permissions (see PAT Setup below) - <code>PYPI_API_TOKEN</code>: Generate from PyPI account settings</p> <p>Repository Settings: - Actions: Enable \"Read and write permissions\" and \"Allow GitHub Actions to create and approve pull requests\" - Pages: Set source to \"Deploy from a branch\" using <code>gh-pages</code> branch</p>"},{"location":"development/ci-cd/#personal-access-token-pat-setup","title":"Personal Access Token (PAT) Setup","text":"<p>The workflow requires a Personal Access Token instead of the default <code>GITHUB_TOKEN</code> because it needs enhanced permissions to: - Push commits back to the repository (version bumps and changelog updates) - Create and manage GitHub releases - Access repository metadata for version analysis</p> <p>Creating a PAT: 1. Go to GitHub Settings &gt; Developer settings &gt; Personal access tokens &gt; Tokens (classic) 2. Click \"Generate new token (classic)\" 3. Set expiration and select these scopes:    - <code>repo</code> (Full control of private repositories)    - <code>workflow</code> (Update GitHub Action workflows) 4. Copy the token and add it as <code>GH_PAT</code> secret in repository settings</p> <p>Why PAT is Required: The default <code>GITHUB_TOKEN</code> has limited permissions and cannot trigger subsequent workflow runs or push to protected branches. The PAT provides the necessary permissions for the automated release process.</p>"},{"location":"development/ci-cd/#local-development-setup","title":"Local Development Setup","text":"<p>Install pre-commit hooks: <pre><code>poetry run pre-commit install\npoetry run pre-commit install --hook-type commit-msg\n</code></pre></p> <p>Test installation: <pre><code>poetry run pre-commit run --all-files\n</code></pre></p>"},{"location":"development/ci-cd/#required-configuration","title":"Required Configuration","text":"<p>pyproject.toml (version field): <pre><code>[tool.poetry]\nname = \"onesecondtrader\"\nversion = \"0.1.0\"  # Updated automatically by bump_version.py\n</code></pre></p> <p>mkdocs.yml (key plugins): <pre><code>plugins:\n  - mkdocstrings:\n      handlers:\n        python:\n          options:\n            docstring_style: google\n</code></pre></p>"},{"location":"development/ci-cd/#custom-scripts","title":"Custom Scripts","text":"<p>scripts/bump_version.py: - Analyzes conventional commit messages since last tag - Determines semantic version bump (major/minor/patch) - Updates <code>pyproject.toml</code> version and generates <code>CHANGELOG.md</code> - Returns new version for GitHub Actions workflow</p> <p>scripts/generate_api_docs.py: - Dynamically scans <code>src/onesecondtrader/</code> for available Python modules - Cleans and regenerates API documentation directory - Creates individual module pages and overview based on discovered modules - Updates <code>mkdocs.yml</code> navigation structure automatically - Runs as pre-commit hook locally and in CI pipeline - Prevents documentation sync issues by only documenting available modules</p>"},{"location":"development/ci-cd/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/ci-cd/#common-issues","title":"Common Issues","text":"<p>Permission Denied Errors: - Ensure <code>GH_PAT</code> secret is properly configured with correct scopes - Verify repository Actions permissions allow write access - Check that PAT hasn't expired</p> <p>Version Not Bumping: - Ensure commits follow conventional commit format - Check that there are new commits since the last tag - Verify <code>bump_version.py</code> script can read Git history</p> <p>Documentation Deployment Fails: - Ensure <code>gh-pages</code> branch exists and is configured in repository settings - Check that <code>mkdocs.yml</code> configuration is valid - Verify all documentation dependencies are installed - Ensure the package is installed before documentation build (<code>pip install -e .</code>) - Check that <code>generate_api_docs.py</code> runs successfully and finds modules</p> <p>MyPy Type Checking Issues: - If MyPy fails in CI with module resolution errors, ensure all dependencies are installed - Check that the package structure matches the expected import paths - Verify that <code>mypy.ini</code> or <code>pyproject.toml</code> configuration is correct - Type annotations and type safety are maintained throughout the codebase</p> <p>PyPI Publishing Fails: - Verify <code>PYPI_API_TOKEN</code> is valid and has upload permissions - Check that package name is available on PyPI - Ensure <code>pyproject.toml</code> has correct package metadata</p> <p>Divergent Branches Error: - Occurs when pipeline creates commits (version bumps) while you have local changes - Error message: \"hint: You have divergent branches and need to specify how to reconcile them\" - Solution: <code>git pull --rebase origin master</code> to apply remote changes first - Prevention: Always pull and rebase after successful pipeline runs</p>"},{"location":"development/ci-cd/#workflow-permissions","title":"Workflow Permissions","text":"<p>The workflow requires specific permissions that exceed the default <code>GITHUB_TOKEN</code> capabilities:</p> <ul> <li>Repository Write: To push version bump commits</li> <li>Contents Write: To create and update files</li> <li>Actions Write: To trigger subsequent workflows</li> <li>Pull Requests Write: For automated PR operations</li> <li>Metadata Read: To access repository information</li> </ul> <p>These enhanced permissions are why a Personal Access Token (PAT) is required instead of the default token.</p>"}]}