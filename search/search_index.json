{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"The Trading Infrastructure Toolkit for Python  <p>   Research, simulate, and deploy algorithmic strategies \u2014 all in one place. </p>"},{"location":"#quickstart","title":"Quickstart","text":"PipPoetryColab <pre><code>pip install onesecondtrader\n</code></pre> <pre><code>poetry add onesecondtrader\n</code></pre> <pre><code>!pip install onesecondtrader\n</code></pre>"},{"location":"quickstart/","title":"\u2192 Quickstart","text":""},{"location":"quickstart/#redirecting","title":"Redirecting...","text":"<p>If you are not redirected automatically, click here.</p>"},{"location":"api-reference/log_config/","title":"Log Config","text":"<p>Logging configuration for the OneSecondTrader package.</p> <p>This module sets up the default logging configuration and provides a logger instance for use throughout the package.</p> Source code in <code>log_config.py</code> <pre><code>\"\"\"Logging configuration for the OneSecondTrader package.\n\nThis module sets up the default logging configuration and provides\na logger instance for use throughout the package.\n\"\"\"\n\nimport logging\n\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format=\"%(asctime)s - %(levelname)s - %(threadName)s - %(message)s\",\n)\n\nlogger = logging.getLogger(\"onesecondtrader\")\n</code></pre>"},{"location":"api-reference/overview/","title":"API Reference","text":"<ul> <li> <p>Log Config </p> <p> View <code>log_config.py</code> API</p> </li> </ul>"},{"location":"development/ci-cd/","title":"CI/CD Pipeline","text":"<p>The CI/CD pipeline uses local pre-commit hooks to ensure code quality and GitHub Actions to automate releases. The workflow consists of two main stages:</p> <ul> <li>local development with quality gates to prevent problematic commits, and </li> <li>automated deployment to handle versioning, package publishing and documentation deployment.</li> </ul> <p>The following diagram illustrates this CI/CD pipeline:</p> <pre><code>graph TD\n    A[Developer Commits] --&gt; B[\"Pre-commit Hooks&lt;br/&gt;\u2022 Code Quality (Ruff, MyPy)&lt;br/&gt;\u2022 Tests &amp; Coverage&lt;br/&gt;\u2022 Security (Bandit, Safety, Gitleaks)&lt;br/&gt;\u2022 Generate API Docs\"]\n    B --&gt; B2[\"Commit Message Hook&lt;br/&gt;\u2022 Conventional Commits\"]\n    B2 --&gt; C{All Checks Pass?}\n    C --&gt;|No| D[Commit Blocked]\n    C --&gt;|Yes| E[Commit to Local Git]\n    E --&gt; F[Push to GitHub]\n    F --&gt; G[GitHub Actions Triggered&lt;br/&gt;on master branch]\n\n    G --&gt; H[Setup Environment&lt;br/&gt;Python 3.11 + Poetry]\n    H --&gt; I[Install Dependencies]\n    I --&gt; J[Code Quality Checks&lt;br/&gt;Ruff + MyPy + Tests]\n    J --&gt; K[Configure Git with PAT]\n    K --&gt; L[Custom Version Analysis&lt;br/&gt;bump_version.py script]\n\n    L --&gt; M{Version Bump Required?}\n    M --&gt;|Yes| N[Update pyproject.toml&lt;br/&gt;&amp; CHANGELOG.md]\n    M --&gt;|No| S[Deploy Documentation Only]\n\n    N --&gt; O[Commit &amp; Push Changes]\n    O --&gt; P[Build &amp; Publish to PyPI]\n    P --&gt; Q[Create GitHub Release&lt;br/&gt;with tag &amp; changelog]\n    Q --&gt; R[Deploy Documentation&lt;br/&gt;to GitHub Pages]\n    R --&gt; T[Pipeline Complete]\n\n    S --&gt; R\n\n    D --&gt; U[Fix Issues &amp; Retry]\n    U --&gt; A\n\n    subgraph \"Local Development\"\n        A\n        B\n        B2\n        C\n        D\n        E\n        U\n    end\n\n    subgraph \"GitHub Repository\"\n        F\n        G\n    end\n\n    subgraph \"CI/CD Pipeline\"\n        H\n        I\n        J\n        K\n        L\n        M\n        N\n        O\n    end\n\n    subgraph \"Deployment\"\n        P\n        Q\n        R\n        S\n        T\n    end</code></pre>"},{"location":"development/ci-cd/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Local quality gates that run before each commit with <code>fail_fast: true</code> - any failure blocks the commit.</p>"},{"location":"development/ci-cd/#code-quality-hooks","title":"Code Quality Hooks","text":"<ul> <li>Ruff Check: Linting with auto-fixes (<code>poetry run ruff check --fix</code>)</li> <li>Ruff Format: Code formatting (<code>poetry run ruff format</code>)</li> <li>MyPy: Type checking (<code>poetry run mypy src/</code>)</li> </ul>"},{"location":"development/ci-cd/#testing-hooks","title":"Testing Hooks","text":"<ul> <li>Pytest: Full test suite (<code>poetry run pytest</code>)</li> <li>Doctest: Validates docstring examples (<code>poetry run pytest --doctest-modules</code>)</li> <li>Coverage: Enforces 90% coverage threshold (<code>poetry run pytest --cov=src/ --cov-fail-under=90</code>)</li> </ul>"},{"location":"development/ci-cd/#security-hooks","title":"Security Hooks","text":"<ul> <li>Bandit: Scans for security vulnerabilities (<code>poetry run bandit -r src/</code>)</li> <li>Safety: Checks dependencies for known vulnerabilities</li> <li>Gitleaks: Detects secrets and API keys</li> </ul>"},{"location":"development/ci-cd/#documentation-hook","title":"Documentation Hook","text":"<ul> <li>Generate API Docs: Auto-generates and stages API documentation based on google-style docstrings in <code>src/onesecondtrader</code></li> </ul>"},{"location":"development/ci-cd/#external-hooks","title":"External Hooks","text":"<ul> <li>Conventional Commits: Enforces commit message format (required for automated versioning)</li> <li>Gitleaks: Detects secrets and API keys in commits</li> <li>File Validation: YAML/TOML/JSON syntax, file size limits, merge conflicts, debug statements</li> </ul>"},{"location":"development/ci-cd/#commit-message-conventions","title":"Commit Message Conventions","text":"<p>This project follows Conventional Commits specification for commit messages. This standardized format enables automated semantic versioning and changelog generation.</p>"},{"location":"development/ci-cd/#commit-message-format","title":"Commit Message Format","text":"<pre><code>&lt;type&gt;: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre>"},{"location":"development/ci-cd/#commit-types","title":"Commit Types","text":"<ul> <li>feat: New features that add functionality</li> <li>fix: Bug fixes and patches</li> <li>docs: Documentation changes only</li> <li>chore: Maintenance tasks, dependency updates, build changes</li> <li>test: Adding or modifying tests</li> <li>refactor: Code changes that neither fix bugs nor add features</li> <li>perf: Performance improvements</li> <li>ci: Changes to CI/CD configuration</li> </ul>"},{"location":"development/ci-cd/#examples","title":"Examples","text":"<pre><code>feat: add portfolio optimization algorithm\nfix: resolve division by zero in risk calculation\ndocs: update API reference for trading module\nchore: bump pandas dependency to 2.3.1\ntest: add unit tests for backtesting engine\n</code></pre> <p>Commit messages are validated by the <code>conventional-pre-commit</code> hook, which blocks commits that don't follow this format.</p>"},{"location":"development/ci-cd/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>Automated CI/CD that triggers on every push to <code>master</code> branch.</p>"},{"location":"development/ci-cd/#workflow-steps","title":"Workflow Steps","text":"<ol> <li>Setup: Checkout code with full Git history (<code>fetch-depth: 0</code>), install Python 3.11 and Poetry</li> <li>Dependencies: Install project dependencies with <code>poetry install --with dev</code></li> <li>Quality Checks: Run Ruff linting, MyPy type checking, and pytest</li> <li>Git Configuration: Configure bot identity and PAT authentication for automated operations</li> <li>Version Analysis: Custom script analyzes conventional commits to determine version bump</li> <li>Conditional Release: If version bump required:</li> <li>Update <code>pyproject.toml</code> and <code>CHANGELOG.md</code></li> <li>Commit and push changes</li> <li>Build and publish to PyPI</li> <li>Create GitHub release with tag and changelog</li> <li>Documentation: Deploy to GitHub Pages using <code>mkdocs gh-deploy</code></li> </ol>"},{"location":"development/ci-cd/#key-features","title":"Key Features","text":"<ul> <li>Custom Semantic Versioning: Uses <code>scripts/bump_version.py</code> to analyze conventional commits</li> <li>Conditional Publishing: Only publishes when version bump is required</li> <li>Automated Changelog: Generates changelog from commit messages</li> <li>GitHub Releases: Creates releases with tags and changelog content</li> <li>Documentation Deployment: Always deploys docs, regardless of version changes</li> <li>PAT Authentication: Uses Personal Access Token for enhanced permissions</li> </ul>"},{"location":"development/ci-cd/#setup-instructions","title":"Setup Instructions","text":""},{"location":"development/ci-cd/#github-configuration","title":"GitHub Configuration","text":"<p>Required Secrets (<code>Settings &gt; Secrets and variables &gt; Actions</code>): - <code>GH_PAT</code>: Personal Access Token with enhanced permissions (see PAT Setup below) - <code>PYPI_API_TOKEN</code>: Generate from PyPI account settings</p> <p>Repository Settings: - Actions: Enable \"Read and write permissions\" and \"Allow GitHub Actions to create and approve pull requests\" - Pages: Set source to \"Deploy from a branch\" using <code>gh-pages</code> branch</p>"},{"location":"development/ci-cd/#personal-access-token-pat-setup","title":"Personal Access Token (PAT) Setup","text":"<p>The workflow requires a Personal Access Token instead of the default <code>GITHUB_TOKEN</code> because it needs enhanced permissions to: - Push commits back to the repository (version bumps and changelog updates) - Create and manage GitHub releases - Access repository metadata for version analysis</p> <p>Creating a PAT: 1. Go to GitHub Settings &gt; Developer settings &gt; Personal access tokens &gt; Tokens (classic) 2. Click \"Generate new token (classic)\" 3. Set expiration and select these scopes:    - <code>repo</code> (Full control of private repositories)    - <code>workflow</code> (Update GitHub Action workflows) 4. Copy the token and add it as <code>GH_PAT</code> secret in repository settings</p> <p>Why PAT is Required: The default <code>GITHUB_TOKEN</code> has limited permissions and cannot trigger subsequent workflow runs or push to protected branches. The PAT provides the necessary permissions for the automated release process.</p>"},{"location":"development/ci-cd/#local-development-setup","title":"Local Development Setup","text":"<p>Install pre-commit hooks: <pre><code>poetry run pre-commit install\npoetry run pre-commit install --hook-type commit-msg\n</code></pre></p> <p>Test installation: <pre><code>poetry run pre-commit run --all-files\n</code></pre></p>"},{"location":"development/ci-cd/#required-configuration","title":"Required Configuration","text":"<p>pyproject.toml (version field): <pre><code>[tool.poetry]\nname = \"onesecondtrader\"\nversion = \"0.1.0\"  # Updated automatically by bump_version.py\n</code></pre></p> <p>mkdocs.yml (key plugins): <pre><code>plugins:\n  - mkdocstrings:\n      handlers:\n        python:\n          options:\n            docstring_style: google\n</code></pre></p>"},{"location":"development/ci-cd/#custom-scripts","title":"Custom Scripts","text":"<p>scripts/bump_version.py: - Analyzes conventional commit messages since last tag - Determines semantic version bump (major/minor/patch) - Updates <code>pyproject.toml</code> version and generates <code>CHANGELOG.md</code> - Returns new version for GitHub Actions workflow</p> <p>scripts/generate_api_docs.py: - Auto-generates API documentation from source code - Creates individual module pages and overview - Updates <code>mkdocs.yml</code> navigation structure - Runs as pre-commit hook to keep docs synchronized</p>"},{"location":"development/ci-cd/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/ci-cd/#common-issues","title":"Common Issues","text":"<p>Permission Denied Errors: - Ensure <code>GH_PAT</code> secret is properly configured with correct scopes - Verify repository Actions permissions allow write access - Check that PAT hasn't expired</p> <p>Version Not Bumping: - Ensure commits follow conventional commit format - Check that there are new commits since the last tag - Verify <code>bump_version.py</code> script can read Git history</p> <p>Documentation Deployment Fails: - Ensure <code>gh-pages</code> branch exists and is configured in repository settings - Check that <code>mkdocs.yml</code> configuration is valid - Verify all documentation dependencies are installed</p> <p>PyPI Publishing Fails: - Verify <code>PYPI_API_TOKEN</code> is valid and has upload permissions - Check that package name is available on PyPI - Ensure <code>pyproject.toml</code> has correct package metadata</p>"},{"location":"development/ci-cd/#workflow-permissions","title":"Workflow Permissions","text":"<p>The workflow requires specific permissions that exceed the default <code>GITHUB_TOKEN</code> capabilities:</p> <ul> <li>Repository Write: To push version bump commits</li> <li>Contents Write: To create and update files</li> <li>Actions Write: To trigger subsequent workflows</li> <li>Pull Requests Write: For automated PR operations</li> <li>Metadata Read: To access repository information</li> </ul> <p>These enhanced permissions are why a Personal Access Token (PAT) is required instead of the default token.</p>"}]}